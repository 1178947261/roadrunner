name: build

on:
  push:
  pull_request:

jobs:
  golang:
    name: Build (Go ${{ matrix.go }}, PHP ${{ matrix.php }}, OS ${{matrix.os}})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        php: [ '7.4', '8.0' ]
        go: [ '1.14', '1.15' ]
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v2 # action page: <https://github.com/actions/setup-go>
        with:
          go-version: ${{ matrix.go }}

      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@v2 # action page: <https://github.com/shivammathur/setup-php>
        with:
          php-version: ${{ matrix.php }}
          extensions: sockets

      - name: Check out code
        uses: actions/checkout@v2

      - name: Get Composer Cache Directory
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Init Composer Cache # Docs: <https://git.io/JfAKn#php---composer>
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ matrix.php }}-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: cd tests && composer update --prefer-dist --no-progress --ansi

      - name: Init Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Run golang tests on Windows without codecov
        if: ${{ matrix.os == 'windows-latest' || matrix.os == 'macos-latest' }}
        run: |
          go test -v -race -cover -tags=debug .
          go test -v -race -cover -tags=debug ./plugins/rpc
          go test -v -race -cover -tags=debug ./plugins/rpc/tests
          go test -v -race -cover -tags=debug ./plugins/config/tests
          go test -v -race -cover -tags=debug ./plugins/logger/tests
          go test -v -race -cover -tags=debug ./plugins/server/tests
          go test -v -race -cover -tags=debug ./plugins/metrics/tests
          go test -v -race -cover -tags=debug ./plugins/informer/tests
          go test -v -race -cover -tags=debug ./plugins/resetter/tests
          go test -v -race -cover -tags=debug ./plugins/http/attributes
          go test -v -race -cover -tags=debug ./plugins/http/tests
          go test -v -race -cover -tags=debug ./plugins/gzip/tests
          go test -v -race -cover -tags=debug ./plugins/static/tests
          go test -v -race -cover -tags=debug ./plugins/static
          go test -v -race -cover -tags=debug ./plugins/headers/tests
          go test -v -race -cover -tags=debug ./plugins/checker/tests

      - name: Run golang tests on Linux and MacOS
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        run: |
          mkdir ./coverage-ci
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/lib.txt -covermode=atomic .
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/rpc_config.txt -covermode=atomic ./plugins/rpc
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/rpc.txt -covermode=atomic ./plugins/rpc/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/plugin_config.txt -covermode=atomic ./plugins/config/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/logger.txt -covermode=atomic ./plugins/logger/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/server.txt -covermode=atomic ./plugins/server/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/metrics.txt -covermode=atomic ./plugins/metrics/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/informer.txt -covermode=atomic ./plugins/informer/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/resetter.txt -covermode=atomic ./plugins/resetter/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/attributes.txt -covermode=atomic ./plugins/http/attributes
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/http_tests.txt -covermode=atomic ./plugins/http/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/gzip.txt -covermode=atomic ./plugins/gzip/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/static.txt -covermode=atomic ./plugins/static/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/static_root.txt -covermode=atomic ./plugins/static
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/headers.txt -covermode=atomic ./plugins/headers/tests
          go test -v -race -cover -tags=debug -coverprofile=./coverage-ci/checker.txt -covermode=atomic ./plugins/checker/tests
          cat ./coverage-ci/*.txt > ./coverage-ci/summary.txt

      - uses: codecov/codecov-action@v1 # Docs: <https://github.com/codecov/codecov-action>
        if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest' }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage-ci/summary.txt
          fail_ci_if_error: false

  golangci-check:
    name: Golang-CI (lint)
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v1

      - name: golangci-lint
        uses: reviewdog/action-golangci-lint@v1 # action page: <https://github.com/reviewdog/action-golangci-lint>
        with:
          github_token: ${{ secrets.github_token }}

#   image:
#     name: Build docker image
#     runs-on: ubuntu-20.04
#     timeout-minutes: 10
#     steps:
#       - name: Check out code
#         uses: actions/checkout@v2

#       - name: Build image
#         run: docker build -t roadrunner:local -f Dockerfile .

#       - name: Scan image
#         uses: anchore/scan-action@v2 # action page: <https://github.com/anchore/scan-action>
#         with:
#           image: roadrunner:local
#           fail-build: true
#           severity-cutoff: low # negligible, low, medium, high or critical
